<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>tht</string>
	</array>
	<key>name</key>
	<string>THT</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>(?x)
			(?:
				(?&lt;!\w)
				(\$[a-zA-Z][a-zA-Z0-9]*) # var assignment (optional)
				\s*(=)\s*
			)?
			\b(function|fn|template|tm)    # keyword
			(?:\s*
				(?&lt;=[\s\*])
				([a-zA-Z][a-zA-Z0-9]*)   # function name
			)?
			\s*
			(\()
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.tht</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment.tht</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.tht</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.tht</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.tht</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Match function, optional function name and optional function arguments</string>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.tht</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.tht</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-params</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.tht</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment.tht</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.tht</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.tht</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Function with no argument parens</string>
			<key>match</key>
			<string>(?x)
			(?:
				(?&lt;!\w)
				(\$[a-zA-Z][a-zA-Z0-9]*)
				\s*(=)\s*
			)?
			\b(function|fn|template|tm)
			(?:\s*
				(?&lt;=[\s\*])
				([a-zA-Z][a-zA-Z0-9]*)
			)?
			\b
			</string>
			<key>name</key>
			<string>meta.function.tht</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
                \b(class)(?=\s|$)
                (?:
                    \s+
                    ([a-zA-Z][a-zA-Z0-9]*)
                )?
                (?:
                    \s+
                    (extends)
                    \s+
                    (?:\b([a-zA-Z][a-zA-Z0-9]*)\b(?![\(]))?
                )?
            </string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.tht</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.class.tht</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tht</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.tht</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\s*($|(?=\{))</string>
			<key>name</key>
			<string>meta.class.tht</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-call</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.)\b(print|range|import|die)\b</string>
			<key>name</key>
			<string>support.function.tht</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[a-zA-Z][a-zA-Z0-9]*?=\s*:\s*(function|fn|template|tm)\b</string>
			<key>name</key>
			<string>entity.name.function.tht</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[a-zA-Z][a-zA-Z0-9]*(?=\s*:)</string>
			<key>name</key>
			<string>entity.name.type.attribute-name.tht</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#markup</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#numbers</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function-call</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#operators</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.)\b(break|catch|continue|else|finally|foreach|if|return|try|match)\b(?!\$)</string>
			<key>name</key>
			<string>keyword.control.tht</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.)\b(as|new|keep|sql|html|jcon|text|cmd|lm|r)\b(?!\$)</string>
			<key>name</key>
			<string>keyword.operator.tht</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.)\b(Result|Form|Test)\b(?!\$)</string>
			<key>name</key>
			<string>support.class.tht</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.)\b(List|Boolean|String|Map|Number|Css|Input|Js|Litemark|Net|Request|Response|Session|Web|Cache|Date|Db|File|Global|Jcon|Json|Math|Meta|Perf|Php|Result|System|Test)\b(?!\$)</string>
			<key>name</key>
			<string>support.constant.tht</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Keywords reserved for future use but now are unused.</string>
			<key>match</key>
			<string>(?&lt;!\.)\b(enum)\b(?!\$)</string>
			<key>name</key>
			<string>invalid.illegal.tht</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(false|true)\b</string>
			<key>name</key>
			<string>constant.language.tht</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\$\w+</string>
			<key>name</key>
			<string>variable.language.tht</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.)\b(\@|\@\@)(?!\s*:)\b</string>
			<key>name</key>
			<string>variable.language.tht</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\;</string>
			<key>name</key>
			<string>punctuation.terminator.statement.tht</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.begin.tht</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.end.tht</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Allows the special return snippet to fire.</string>
			<key>match</key>
			<string>(\[)(\])</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.begin.tht</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}(?!\})</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.end.tht</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.begin.tht</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.end.tht</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\[|\]</string>
			<key>name</key>
			<string>meta.brace.square.tht</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Match classes based on the usage of the "new" operator.</string>
			<key>match</key>
			<string>(?&lt;=new )([A-Z][a-zA-Z0-9]*)(?!\w)</string>
			<key>name</key>
			<string>support.class.tht</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/|\*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.tht</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.tht</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.documentation.tht</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&lt;!\w)@(abstract|access|alias|arg|argument|async|attribute|augments|author|beta|borrows|bubbes|callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright|default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exports?|extends|extension|extension_for|extensionfor|external|file|fileoverview|final|fires|for|function|global|host|ignore|implements|inherit[Dd]oc|inner|instance|interface|kind|lends|license|listens|main|member|memberof|method|mixex|mixins?|module|name|namespace|nocollapse|nosideeffects|override|overview|package|param|preserve|private|prop|property|protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation|version|virtual|writeOnce)\b</string>
							<key>name</key>
							<string>keyword.other.documentation.tht.thtdoc</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.tht</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.tht</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.tht</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=//)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.tht</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>//</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.tht</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\n</string>
							<key>name</key>
							<string>comment.line.double-slash.tht</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\w)([a-zA-Z][a-zA-Z0-9]*)(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.tht</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function-call.begin.tht</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Matches function calls.</string>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function-call.end.tht</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function-params</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[\$])|(\.\.\.)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.rest-parameters.tht</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Matches valid argument, function and variable names.</string>
					<key>end</key>
					<string>(?=[,)/])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\G\$[a-zA-Z][a-zA-Z0-9]*</string>
							<key>name</key>
							<string>variable.parameter.function.tht</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-call</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#numbers</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#operators</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&lt;!\.)\b(super|this|@|@@)(?!\s*:)\b</string>
							<key>name</key>
							<string>variable.language.tht</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
		<key>markup</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>&lt;!-+\S.*?&gt;</string>
					<key>name</key>
					<string>comment.block.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;\S.*?&gt;+</string>
					<key>name</key>
					<string>string.quoted.single.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>^(\s*)\#+.*?$</string>
					<key>name</key>
					<string>string.quoted.single.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*\*([^\n]*?)\*\*</string>
					<key>name</key>
					<string>string.quoted.single.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>__([^\n]*?)__</string>
					<key>name</key>
					<string>string.quoted.single.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\[((\/|http:|https:).*?\|.*?|[a-z]+)\]</string>
					<key>name</key>
					<string>string.quoted.single.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>^(\s*)\-\s+</string>
					<key>name</key>
					<string>markup.list.unnumbered.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>^(\s*)\+\s+</string>
					<key>name</key>
					<string>markup.list.numbered.tht</string>
				</dict>
			</array>
		</dict>
		<key>numbers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\w|\$)0[xX]\h+\b</string>
					<key>name</key>
					<string>constant.numeric.hex.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\w|\$)0[bB][01]+\b</string>
					<key>name</key>
					<string>constant.numeric.binary.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
        				(?&lt;!\w|\$)							    # Ensure word boundry
                        [+-]?                                   # Optional sign
        				(?&gt;
        					(
        						(0|[1-9][0-9_]*)(\.[0-9]*)?		# 0 or 1 or 1. or 1.0
        					  | \.[0-9]+						# .1
        					)
        					([eE][+-]?[0-9]+)?					# Exponent
        				)
        				(?!\w)									# Ensure word boundry
        			</string>
					<key>name</key>
					<string>constant.numeric.tht</string>
				</dict>
			</array>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>^\s*\-\-\-\s+</string>
					<key>name</key>
					<string>keyword.operator.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%=|\+=|\-=|\*=|\|\|=|&amp;&amp;=|\#=|~=|(?&lt;!\()/=</string>
					<key>name</key>
					<string>keyword.operator.assignment.compound.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+^|\+\||\+&amp;</string>
					<key>name</key>
					<string>keyword.operator.assignment.compound.bitwise.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>!=|&lt;=|&gt;=|==|&lt;|&gt;|&lt;=&gt;</string>
					<key>name</key>
					<string>keyword.operator.comparison.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&amp;&amp;|!|\|\|</string>
					<key>name</key>
					<string>keyword.operator.logical.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+&amp;|\+\||\+\^|\+~</string>
					<key>name</key>
					<string>keyword.operator.bitwise.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\{\{|\}\}</string>
					<key>name</key>
					<string>keyword.operator.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\:|~</string>
					<key>name</key>
					<string>keyword.operator.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>=|\:</string>
					<key>name</key>
					<string>keyword.operator.assignment.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%|\*|/|\-|\+</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.\.\.</string>
					<key>name</key>
					<string>keyword.operator.spread.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>@|@@</string>
					<key>name</key>
					<string>variable.language.tht</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\?</string>
					<key>name</key>
					<string>keyword.operator.ternary.tht</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(url|html|sql|cmd|css|js|lm)'''</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.tht</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.tht</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.other.triple.tht</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escapes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(url|html|sql|cmd|css|js|lm)'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.tht</string>
						</dict>
					</dict>
					<key>end</key>
					<string>('|\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.tht</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.other.single.tht</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escapes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>r'''</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.tht</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.tht</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.triple.tht</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escapes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>r'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.tht</string>
						</dict>
					</dict>
					<key>end</key>
					<string>('|\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.tht</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.single.tht</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escapes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'''</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.tht</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.tht</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.triple.tht</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escapes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.tht</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Using newline as terminator to work around apostrophes templates.</string>
					<key>end</key>
					<string>('|\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.tht</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.tht</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escapes</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\\n</string>
							<key>name</key>
							<string>constant.character.escape.newline.tht</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>```</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.tht</string>
						</dict>
					</dict>
					<key>end</key>
					<string>```</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.tht</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.other.triple.tht</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escapes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>`([^\n]*?)`</string>
					<key>name</key>
					<string>string.other.single.tht</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>escapes</key>
				<dict>
					<key>match</key>
					<string>(\.)</string>
					<key>name</key>
					<string>constant.character.escape.tht</string>
				</dict>
			</dict>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.tht</string>
	<key>semanticClass</key>
	<string>tht</string>
	<key>uuid</key>
	<string>C3F3875A-757B-40C4-A1F6-3BE41A1535F6</string>
</dict>
</plist>
